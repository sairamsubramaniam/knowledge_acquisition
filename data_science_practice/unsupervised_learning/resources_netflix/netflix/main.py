import numpy as np
import kmeans
import common
import naive_em
import em

# X = np.loadtxt("toy_data.txt")

# X= [[0.85794562, 0.84725174],
# [0.6235637, 0.38438171],
# [0.29753461, 0.05671298],
# [0.27265629, 0.47766512],
# [0.81216873, 0.47997717],
# [0.3927848,  0.83607876],
# [0.33739616, 0.64817187],
# [0.36824154, 0.95715516],
# [0.14035078, 0.87008726],
# [0.47360805, 0.80091075],
# [0.52047748, 0.67887953],
# [0.72063265, 0.58201979],
# [0.53737323, 0.75861562],
# [0.10590761, 0.47360042],
# [0.18633234, 0.73691818]]
# 
# mu = [[0.6235637,  0.38438171],
# [0.3927848,  0.83607876],
# [0.81216873, 0.47997717],
# [0.14035078, 0.87008726],
# [0.36824154, 0.95715516],
# [0.10590761, 0.47360042]]
# 
# var = [0.10038354, 0.07227467, 0.13240693, 0.12411825, 0.10497521, 0.12220856]
# 
# p = [0.1680912,  0.15835331, 0.21384187, 0.14223565, 0.14295074, 0.17452722]
# 
# ll = -1820.772076


# X = [[0.64341373, 0.39657958, 0.26706779, 0.73565601],
# [0.04481439, 0.26335149, 0.27807551, 0.90311124],
# [0.65210443, 0.05153615, 0.93717455, 0.36277645],
# [0.08539303, 0.70282979, 0.76947773, 0.67956225],
# [0.16367746, 0.92622794, 0.11558954, 0.5754424 ],
# [0.20371496, 0.99669322, 0.68518657, 0.15198495],
# [0.5101784,  0.76413566, 0.32429509, 0.20630015],
# [0.89805146, 0.39296984, 0.83425737, 0.60334029],
# [0.20834624, 0.11119583, 0.90756717, 0.74320852],
# [0.69971701, 0.56282618, 0.30718409, 0.94480953],
# [0.51300049, 0.29210023, 0.45679638, 0.49884504],
# [0.6600824,  0.59157809, 0.79659123, 0.76566521],
# [0.9962178,  0.61297974, 0.00439356, 0.31643601],
# [0.61444007, 0.55504104, 0.50796602, 0.69029885],
# [0.35837008, 0.29978178, 0.35693136, 0.18336233],
# [0.9318102,  0.11282908, 0.95737866, 0.87130589]]
# 
# mu = [[0.9962178,  0.61297974, 0.00439356, 0.31643601],
#  [0.20834624, 0.11119583, 0.90756717, 0.74320852],
#  [0.20371496, 0.99669322, 0.68518657, 0.15198495],
#  [0.35837008, 0.29978178, 0.35693136, 0.18336233],
#  [0.69971701, 0.56282618, 0.30718409, 0.94480953]]
# 
# var = [0.2294802,  0.1783156,  0.22188857, 0.13972827, 0.13675884]
# 
# p = [0.22482647, 0.20048968, 0.17752276, 0.23088477, 0.16627632]
# 
# ll = -1836.921358


# X = np.array([[2., 5., 3., 0., 0.],
#  [3., 5., 0., 4., 3.],
#  [2., 0., 3., 3., 1.],
#  [4., 0., 4., 5., 2.],
#  [3., 4., 0., 0., 4.],
#  [1., 0., 4., 5., 5.],
#  [2., 5., 0., 0., 1.],
#  [3., 0., 5., 4., 3.],
#  [0., 5., 3., 3., 3.],
#  [2., 0., 0., 3., 3.],
#  [3., 4., 3., 3., 3.],
#  [1., 5., 3., 0., 1.],
#  [4., 5., 3., 4., 3.],
#  [1., 4., 0., 5., 2.],
#  [1., 5., 3., 3., 5.],
#  [3., 5., 3., 4., 3.],
#  [3., 0., 0., 4., 2.],
#  [3., 5., 3., 5., 1.],
#  [2., 4., 5., 5., 0.],
#  [2., 5., 4., 4., 2.]])
# K = 4
# mu = np.array([[2., 4., 5., 5., 0.],
#  [3., 5., 0., 4., 3.],
#  [2., 5., 4., 4., 2.],
#  [0., 5., 3., 3., 3.]])
# var = np.array([5.93, 4.87, 3.99, 4.51])
# p = np.array([0.25, 0.25, 0.25, 0.25])
# 
# gm = common.GaussianMixture(mu, var, p)




X = np.array([[0.85794562, 0.84725174],
 [0.6235637 , 0.38438171],
 [0.29753461, 0.05671298],
 [0.        , 0.47766512],
 [0.        , 0.        ],
 [0.3927848 , 0.        ],
 [0.        , 0.64817187],
 [0.36824154, 0.        ],
 [0.        , 0.87008726],
 [0.47360805, 0.        ],
 [0.        , 0.        ],
 [0.        , 0.        ],
 [0.53737323, 0.75861562],
 [0.10590761, 0.        ],
 [0.18633234, 0.        ]])

# post = np.array([[0.15765074, 0.20544344, 0.17314824, 0.15652173, 0.12169798, 0.18553787],
#  [0.1094766 , 0.22310587, 0.24109142, 0.0959303 , 0.19807563, 0.13232018],
#  [0.22679645, 0.36955206, 0.02836173, 0.03478709, 0.00807236, 0.33243031],
#  [0.16670188, 0.18637975, 0.20964608, 0.17120102, 0.09886116, 0.16721011],
#  [0.04250305, 0.22996176, 0.05151538, 0.33947585, 0.18753121, 0.14901275],
#  [0.09799086, 0.28677458, 0.16895715, 0.21054678, 0.0069597 , 0.22877093],
#  [0.16764519, 0.16897033, 0.25848053, 0.18674186, 0.09846462, 0.11969746],
#  [0.28655211, 0.02473762, 0.27387452, 0.27546459, 0.08641467, 0.05295649],
#  [0.11353057, 0.13090863, 0.20522811, 0.15786368, 0.35574052, 0.03672849],
#  [0.10510461, 0.08116927, 0.3286373 , 0.12745369, 0.23464272, 0.12299241],
#  [0.09757735, 0.06774952, 0.40286261, 0.08481828, 0.1206645 , 0.22632773],
#  [0.24899344, 0.02944918, 0.25413459, 0.02914503, 0.29614373, 0.14213403],
#  [0.35350682, 0.21890411, 0.26755234, 0.01418274, 0.10235276, 0.04350123],
#  [0.15555757, 0.06236572, 0.16703133, 0.21760554, 0.03369562, 0.36374421],
#  [0.1917808 , 0.08982788, 0.17710673, 0.03179658, 0.19494387, 0.31454414]])





# mu = np.array([[2., 4.],
#  [3., 5.],
#  [2., 5.],
#  [0., 5.],
#  [0., 0.],
#  [0., 0.]])
# var = np.array([5.93, 4.87, 3.99, 4.51, 0.25, 0.25])
# p = np.array([0.25, 0.25, 0.25, 0.25, 0., 0.])
# 
# gm = common.GaussianMixture(mu, var, p)
# 
# 
# ggmm = em.mstep(X, post, gm)




# X = np.loadtxt("netflix_incomplete.txt")

# TODO: Your code here

# Check Best Seed For costs
# for k in [1,2,3,4]:
#     for s in [0,1,2,3,4]:
#         gm, post = common.init(X=X, K=k, seed=s)
#         fin_gmm, fin_post, fin_cost = kmeans.run(X=X, mixture=gm, post=post)
#         print("K=", k, " ; Seed=", s, " -- ", fin_cost)

# Compare Plots
# for k in [1,2,3,4]:
#     gm, post = common.init(X=X, K=k, seed=4)
#     fin_gmm, fin_post, fin_cost = kmeans.run(X=X, mixture=gm, post=post)
#     common.plot(X=X, mixture=fin_gmm, post=fin_post, title="KMeans K={k}".format(k=k))



# Check Best Seed For Log Likelihoods
# for k in [1,2,3,4]:
#     for s in [0,1,2,3,4]:
#         gm, post = common.init(X=X, K=k, seed=s)
#         em_gmm, em_post, em_ll = naive_em.run(X=X, mixture=gm, post=post)
#         print("K=", k, " ; Seed=", s, " -- ", em_ll)

# Compare Plots
# for k in [1,2,3,4]:
#     gm, post = common.init(X=X, K=k, seed=1)
#     em_gmm, em_post, em_ll = naive_em.run(X=X, mixture=gm, post=post)
#     common.plot(X=X, mixture=em_gmm, post=em_post, title="EM Plots K={k}".format(k=k))


# Optimal bic for K = 1,2,3,4
# for k in [1,2,3,4]:
#     gm, post = common.init(X=X, K=k, seed=1)
#     em_gmm, em_post, em_ll = naive_em.run(X=X, mixture=gm, post=post)
#     print("K=", k, ":  ", common.bic(X, em_gmm, em_ll))


for k in [1,12]:
   for s in [5]:
       gm, post = common.init(X=X, K=k, seed=s)
       em_gmm, em_post, em_ll = em.run(X=X, mixture=gm, post=post)
       print("K=", k, " ; Seed=", s, " -- ", em_ll)



print("Mean: ", em_gmm.mu)
print("P   : ", em_gmm.p)
print("Var : ", em_gmm.var)
print(em.fill_matrix(X, em_gmm))
